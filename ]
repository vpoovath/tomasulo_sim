#!/usr/env/python
# Author: Vivek Poovathoor
# This module implements the j


import os
import sys
import time
import register_file as rf
import functional_units as fu
from collections import OrderedDict as OrderedDict
from tag import Tag


# A ReservStation object contains a list of stations each of which is 
# defined by an OrderedDict in which the key is the index of the station
# and the value is the following list:
# [busy status, op name, Qi Tag, op dest, Qj Tag, Vj, Qk Tag, Vk, 
#  ready status, Instruction]
class ReservStation:
    def __init__(self,start_idx,num_stations,rs_type):
        self._rs_type = rs_type
        self._num_stations = num_stations
        self._stations = OrderedDict((key,["No", None, Tag(None,0), None, 
                                           Tag(None,0), None, Tag(None,0),
                                           None,"Not Ready", None]) for key in 
                                     range(start_idx, start_idx+num_stations))
    @property
    def rs_type(self):
        return self._rs_type

    @property
    def stations(self):
        return self._stations

    @property
    def num_stations(self):
        return self._num_stations

    def find_nonoccupied_station_idx(self):
        for station,value in self.stations.items():
            if value[0] == "No": return station
        return None

    def is_occupied(self):
        if any(value[0] == "Yes" for station,value in self.stations.items()):
            return True
        else:
            return False

    def find_occupied_station_idx(self):
        occupied_stations = []
        for station,value in self.stations.items():
            if value[0] == "Yes": occupied_stations.append(station)
        return occupied_stations


# Create the individual reservation stations using the following default
# number of stations. It is assumed that the first load station in the load_rs
# station has the lowest index. 
NUM_LD_STATIONS     = 3
NUM_SD_STATIONS     = 3
NUM_ADDD_STATIONS   = 3
NUM_MULTD_STATIONS  = 2
LD_STATION_START    = 1
SD_STATION_START    = LD_STATION_START + NUM_LD_STATIONS
ADDD_STATION_START  = LD_STATION_START + NUM_LD_STATIONS + NUM_SD_STATIONS
MULTD_STATION_START = (LD_STATION_START + NUM_LD_STATIONS + NUM_SD_STATIONS +
                       NUM_ADDD_STATIONS)

load_rs  = ReservStation(LD_STATION_START,NUM_LD_STATIONS,"load")
store_rs = ReservStation(SD_STATION_START,NUM_SD_STATIONS,"store")
add_rs   = ReservStation(ADDD_STATION_START,NUM_ADDD_STATIONS,"add")
mult_rs  = ReservStation(MULTD_STATION_START,NUM_MULTD_STATIONS,"mult")


# Given a station, determine the corresponding
# functional unit and return that functioal unit.
def get_corresponding_fu(station):
    op = station[1]
    switcher = {"LD": fu.load_fu,
                "SD": fu.store_fu,
                "ADDD":fu.add_fu,
                "SUBD":fu.add_fu,
                "MULTD":fu.mult_fu,
                "DIVD":fu.mult_fu,
               }

    return switcher.get(op,-1)


# This function checks to see if the given station is READY
# to be start execution.
# The load tag here is meant to handle the case when a register is used
# consecutively as a destination register (e.g. one load and then
# another load to the same register):w
def is_station_ready(res_stat, stat_idx, reg_file):
    station = res_stat.stations[stat_idx]
    if (get_corresponding_fu(station) == -1):
        raise ValueError("Invalid instruction operation!")

    func_unit       = get_corresponding_fu(station)
    vj_tag          = get_station_vj_tag(station)
    vk_tag          = get_station_vk_tag(station)
    operand1_ready  = ((vj_tag.rs_type is None and vj_tag.idx == 0) or
                      (vj_tag.rs_type == res_stat.rs_type and vj_tag.idx == stat_idx))
    operand2_ready  = ((vk_tag.rs_type is None and vk_tag.idx == 0) or
                      (vk_tag.rs_type == res_stat.rs_type and vk_tag.idx == stat_idx))
    dest_ready      = rf.is_register_available(reg_file,
                                               station[3],
                                               station[2].rs_type,
                                               station[2].idx)
    fu_is_available = func_unit.is_available()

    if (operand1_ready and operand2_ready and dest_ready and fu_is_available):
        rf.load_register_tag(reg_file, station[3], res_stat.rs_type, 
                             stat_idx)
        return True
    else:
        return False


# Clear the station within the reservation station (res_stat) object
# at the given index.
def clear_station(res_stat, stat_idx):
    res_stat.stations[stat_idx][0] = "No"
    res_stat.stations[stat_idx][1] = None
    res_stat.stations[stat_idx][2].clear_tag()
    res_stat.stations[stat_idx][3] = None
    res_stat.stations[stat_idx][4].clear_tag()
    res_stat.stations[stat_idx][5] = None
    res_stat.stations[stat_idx][6].clear_tag()
    res_stat.stations[stat_idx][7] = None
    res_stat.stations[stat_idx][8] = "Not Ready"


# Clear all the 
def clear_rs_tags(rs_list, tag):
    for res_stat in rs_list:
        for stat_idx, station in res_stat.stations.items():
            if (station[2].rs_type == tag.rs_type and 
                station[2].idx == tag.idx):
                station[2].clear_tag()
            if (station[4].rs_type == tag.rs_type and 
                station[4].idx == tag.idx):
                station[4].clear_tag()
            if (station[6].rs_type == tag.rs_type and 
                station[6].idx == tag.idx):
                station[6].clear_tag()


# This function checks to see what individual stations amongst
# all reservation stations need their corresponding Vj and Vk
# values to be updated. First if the tag of station corresponding
# to Vj value 
def update_rs_operands(rs_list, reg_file, dest_reg, tag):
    for res_stat in rs_list:
        for stat_idx, station in res_stat.stations.items():
            vj_tag = get_station_vj_tag(station)
            vk_tag = get_station_vk_tag(station)
            if (vj_tag.rs_type == tag.rs_type and 
                vj_tag.idx == tag.idx):
                #station[5] = reg_file[dest_reg][1]
                set_station_vj(station, reg_file[dest_reg][1])
            if (station[6].rs_type == tag.rs_type and 
                station[6].idx == tag.idx):
                #station[7] = reg_file[dest_reg][1]
                set_station_vk(station, reg_file[dest_reg][1])


# Get access to a station's instruction field (column).
def get_station_instr(station):
    return station[9]


# Get the instruction's index of the stations' instruction 
# field.
def get_station_instr_idx(station):
    return station[9].instr_index


# Get the Vj tag of the station.
def get_station_vj_tag(station):
    return station[4]


# Get the Vj value of the station.
def get_station_vj(station):
    return station[5]


# Set the Vj value to a user-specified value.
def set_station_vj(station,value):
    station[5] = value


# Get the Vk tag of the station.
def get_station_vk_tag(station):
    return station[6]


# Get the Vk tag of the station.
def get_station_vk(station):
    return station[7]


# Set the Vj value to a user-specified value.
def set_station_vk(station,value):
    station[7] = value


# 
def execute_station_op(station, reg_file):
    operation = station[1]
    dest      = station[3]
    operand1  = station[5]
    operand2  = station[7]
    
    if operation == "ADDD":    return (operand1 + operand2)
    elif operation == "SUBD":  return (operand1 - operand2)
    elif operation == "MULTD": return (1.0*(operand1*operand2))
    elif operation == "DIVD":  return (operand1/(1.0*operand2))
    elif operation == "LD":    return reg_file[dest][1]
    elif operation == "SD":    return reg_file[dest][1]
    else: raise ValueError("Invalid instruction operation")


# Assume that stat_idx is valid index of a non-busy station
def populate_rs(res_stat, stat_idx, instr, reg_file):
    res_stat.stations[stat_idx][0]         = "Yes"
    res_stat.stations[stat_idx][1]         = instr.operation
    res_stat.stations[stat_idx][3]         = instr.dest
    res_stat.stations[stat_idx][9]         = instr
    res_stat.stations[stat_idx][2].rs_type = res_stat.rs_type
    res_stat.stations[stat_idx][2].idx     = stat_idx
    rf.load_register_tag(reg_file, instr.dest, res_stat.rs_type, stat_idx)
    
    vj_tag = get_station_vj_tag(res_stat.stations[stat_idx])
    vj_val = get_station_vj(res_stat.stations[stat_idx])
    vk_tag = get_station_vk_tag(res_stat.stations[stat_idx])
    vk_val = get_station_vk(res_stat.stations[stat_idx])
    if type(instr.operand1) == int:
        vj_tag.clear_tag()
        res_stat.stations[stat_idx][5] = instr.operand1
    else:
        if rf.is_register_available(reg_file, instr.operand1, res_stat.rs_type,
                                   stat_idx):
            vj_tag.clear_tag()
            set_station_vj(res_stat.stations[stat_idx],
                           reg_file[instr.operand1][1])
        else:
            vj_tag.rs_type = rf.get_reg_tag(reg_file, instr.operand1).rs_type
            vj_tag.idx = rf.get_reg_tag(reg_file, instr.operand1).idx
    
    if type(instr.operand2) == int:
        vk_tag.clear_tag()
        res_stat.stations[stat_idx][7] = instr.operand2
    else:
        if rf.is_register_available(reg_file, instr.operand2, res_stat.rs_type,
                                   stat_idx):
            vk_tag.clear_tag()
            set_station_vk(res_stat.stations[stat_idx],
                           reg_file[instr.operand2][1])
        else:
            vk_tag.rs_type = rf.get_reg_tag(reg_file, instr.operand2).rs_type
            vk_tag.idx = rf.get_reg_tag(reg_file, instr.operand2).idx
    
    if is_station_ready(res_stat, stat_idx, reg_file):
        res_stat.stations[stat_idx][2].rs_type = res_stat.rs_type
        res_stat.stations[stat_idx][2].idx = stat_idx
        res_stat.stations[stat_idx][8] = "Ready"
